# -*-Perl-*-

# php-RunPHP.ntest -
#
# ECPHP
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;

 
# system tests


require "$::gTestFileDir/../../EC-PHP/systemtest/php-common.ntest";


$::grunPHPCreated = 0;
$::gProjectImported = 0;

#stores the result wheter the result of the procedure is success or error
my $outcome = "";




sub importProject() {
    assertOK($::N->import(
                     { file =>"$::gTestFileDir/phpTests.xml",
               path  => "/projects/phpTests",
               force => 1
             } ), "import runPHPCommandLine");
   
    assertOK($::N->getProcedure("phpTests", "RunPHPFromFile"),"RunPHPFromFile procedure exists");
    assertOK($::N->getProcedure("phpTests", "RunPHPFromTextArea"),"RunPHPFromTextArea procedure exists");
    assertOK($::N->getProcedure("phpTests", "RunPHPWithAdditionalArgs"),"RunPHPWithAdditionalArgs procedure exists");
   
    $::gProjectImported = 1;
}



sub doSetup() {

    if(! $::gProjectImported) {
        importProject();
    }

}

#RunPHPFromFile 

#Test a php command with a correct syntax 

ntest "RunPHPFromFile", {}, sub {
    doSetup();
    # run test job
 
    my $xpath = $::N->runProcedure("phpTests", 
            {   procedureName => "RunPHPFromFile",
                pollInterval  => '1',
                timeout => 600,
                actualParameter => []
            });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
         
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
        
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
             
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }

    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the phpCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='phpCommandLine']/value");

    # make sure the $cmd is what was expected
    assertEq('php -f "C:\tools\php\hello.php"', $cmd, "php correct command line");
 
};
  
#RunPHPFromTextArea 

#Test a php command with some arguments and correct syntax

ntest "RunPHPFromTextArea", {}, sub {
    doSetup();
    # run test job

    my $xpath = $::N->runProcedure("phpTests", 
            {   procedureName => "RunPHPFromTextArea",
                pollInterval  => '1',
                timeout => 600,
                actualParameter => []
            });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
         
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");
 
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
     
        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    
    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the phpCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='phpCommandLine']/value");

    # make sure the $cmd is what was expected
    assertEq('php -f data.php', $cmd, "php correct command line");
};

#RunPHPWithAdditionalArgs 

#Test a php command with a incorrect syntax 

ntest "RunPHPWithAdditionalArgs", {}, sub {
    doSetup();
    # run test job
 
    my $xpath = $::N->runProcedure("phpTests", 
            {   procedureName => "RunPHPWithAdditionalArgs",
                pollInterval  => '1',
                timeout => 600,
                actualParameter => []
            });
    # make sure it finished
    my $jobId = 0;
    my $status = "";
    
    assertOK($xpath, "runProcedure with errors");
    if ($xpath) {
        $jobId  = $xpath->findvalue("//jobId");
        $status = $xpath->findvalue("//status");
        $outcome = $xpath->findvalue("//outcome");

        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");

        #abort if job did not finish
        if ($status ne "completed") {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    # get the job details
    $xpath = $::N->getJobDetails($jobId);

    # get the value of the phpCommandLine property
    my $cmd = $xpath->findvalue("//property[propertyName='phpCommandLine']/value");

    # make sure the $cmd is what was expected
    assertEq('php -f data.php -v', $cmd, "php correct command line");
};
